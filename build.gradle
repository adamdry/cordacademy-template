buildscript {
    ext {
        kotlin_group = "org.jetbrains.kotlin"
        kotlin_version = "1.2.71"

        corda_group = "net.corda"
        corda_release_version = "4.0"

        corda_gradle_plugin_group = "net.corda.plugins"
        corda_gradle_plugin_version = "4.0.45"

        junit_group = "org.junit.jupiter"
        junit_version = "5.3.1"

        log4j_group = "org.apache.logging.log4j"
        log4j_version = "2.11.2"

        cordapp_platform_version = 4
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "$kotlin_group:kotlin-gradle-plugin:$kotlin_version"
        classpath "$corda_gradle_plugin_group:cordapp:$corda_gradle_plugin_version"
        classpath "$corda_gradle_plugin_group:cordformation:$corda_gradle_plugin_version"
        classpath "$corda_gradle_plugin_group:quasar-utils:$corda_gradle_plugin_version"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    targetPlatformVersion cordapp_platform_version
    minimumPlatformVersion cordapp_platform_version
    contract {
        name "Cordacademy Samples Ping CorDapp"
        vendor "Cordacademy"
        licence "Apache License, Version 2.0"
        versionId 1
    }
    workflow {
        name "Cordacademy Samples Ping CorDapp"
        vendor "Cordacademy"
        licence "Apache License, Version 2.0"
        versionId 1
    }
}

dependencies {
    implementation "$kotlin_group:kotlin-stdlib-jdk8:$kotlin_version"

    // Development APIs
    cordaCompile "$corda_group:corda-core:$corda_release_version"

    // Release APIs
    cordaCompile "$corda_group:corda:$corda_release_version"
    cordaCompile "$corda_group:corda-node:$corda_release_version"
    cordaRuntime "$log4j_group:log4j-slf4j-impl:$log4j_version"

    testRuntimeOnly "$junit_group:junit-jupiter-engine:$junit_version"
    testImplementation "$junit_group:junit-jupiter-api:$junit_version"
    testImplementation "$kotlin_group:kotlin-test:$kotlin_version"
    testImplementation "$corda_group:corda-node-driver:$corda_release_version"
}

configurations {
    all {
        resolutionStrategy {
            eachDependency { details ->
                def requested = details.requested

                if (requested.group == 'org.jetbrains.kotlin' && requested.name.startsWith("kotlin-stdlib")) {
                    details.useVersion kotlin_version
                }
            }
        }
    }
}

jar { exclude '**/log4j2*.xml' }

test { useJUnitPlatform() }

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    def rpc = [[user: "user1", "password": "test", "permissions": ["ALL"]]]

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = rpc
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = rpc
    }
    node {
        name "O=PartyC,L=Paris,C=FR"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        rpcUsers = rpc
    }
}